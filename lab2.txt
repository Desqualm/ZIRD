CREATE TABLE MSU_CHMIELEWSKID.EMPLOYEES AS SELECT * FROM HR.EMPLOYEES;

CREATE TABLE MSU_CHMIELEWSKID.DEPARTMENTS AS SELECT * FROM HR.DEPARTMENTS;

CREATE TABLE MSU_CHMIELEWSKID.JOBS AS SELECT * FROM HR.JOBS;

CREATE TABLE MSU_CHMIELEWSKID.JOB_HISTORY AS SELECT * FROM HR.JOB_HISTORY;

CREATE TABLE MSU_CHMIELEWSKID.JOB_GRADES AS SELECT * FROM HR.JOB_GRADES;

CREATE TABLE MSU_CHMIELEWSKID.LOCATIONS AS SELECT * FROM HR.LOCATIONS;

CREATE TABLE MSU_CHMIELEWSKID.COUNTRIES AS SELECT * FROM HR.COUNTRIES;

CREATE TABLE MSU_CHMIELEWSKID.REGIONS AS SELECT * FROM HR.REGIONS;

ALTER TABLE EMPLOYEES ADD CONSTRAINT pk_employees PRIMARY KEY (EMPLOYEE_ID);

ALTER TABLE DEPARTMENTS ADD CONSTRAINT pk_departments PRIMARY KEY (DEPARTMENT_ID);

ALTER TABLE JOBS ADD CONSTRAINT pk_jobs PRIMARY KEY (JOB_ID);

ALTER TABLE REGIONS ADD CONSTRAINT pk_regions PRIMARY KEY (REGION_ID);

ALTER TABLE COUNTRIES ADD CONSTRAINT pk_countries PRIMARY KEY (COUNTRY_ID);

ALTER TABLE LOCATIONS ADD CONSTRAINT pk_locations PRIMARY KEY (LOCATION_ID);

ALTER TABLE JOB_GRADES ADD CONSTRAINT pk_job_grades PRIMARY KEY (GRADE);

ALTER TABLE JOB_HISTORY ADD CONSTRAINT pk_job_history PRIMARY KEY (START_DATE, EMPLOYEE_ID);

ALTER TABLE EMPLOYEES 
ADD CONSTRAINT fk_department
FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID);

ALTER TABLE EMPLOYEES 
ADD CONSTRAINT fk_manager
FOREIGN KEY(manager_id) REFERENCES EMPLOYEES(employee_id);

ALTER TABLE JOB_HISTORY ADD CONSTRAINT fk_jobs FOREIGN KEY(JOB_ID) REFERENCES JOBS(JOB_ID);

ALTER TABLE COUNTRIES ADD CONSTRAINT fk_regions
	FOREIGN KEY(region_id) REFERENCES REGIONS(region_id);

ALTER TABLE LOCATIONS REFERENCES ADD CONSTRAINT fk_countries
	FOREIGN KEY(country_id) REFERENCES COUNTRIES(country_id);

ALTER TABLE LOCATIONS ADD CONSTRAINT fk_countries
	FOREIGN KEY(country_id) REFERENCES COUNTRIES(country_id);

ALTER TABLE DEPARTMENTS ADD CONSTRAINT fk_locations
    FOREIGN KEY(location_id) REFERENCES LOCATIONS(location_id);

ALTER TABLE DEPARTMENTS ADD CONSTRAINT fk_employees
	FOREIGN KEY(manager_id) REFERENCES EMPLOYEES(employee_id);

ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_jobs_id FOREIGN KEY(JOB_ID) REFERENCES JOBS(JOB_ID);

ALTER TABLE JOB_HISTORY  ADD CONSTRAINT fk_departments FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID);

ALTER TABLE JOB_HISTORY  ADD CONSTRAINT fk_employees_id FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);



SELECT CONCAT(CONCAT(LAST_NAME, ' | '), SALARY)AS WYNAGRODZENIE FROM EMPLOYEES WHERE (SALARY > 2000 AND SALARY <= 7000) AND (DEPARTMENT_ID = 20 OR DEPARTMENT_ID = 50) ORDER BY EMPLOYEES.LAST_NAME; 

SELECT e.HIRE_DATE, e.LAST_NAME, e.SALARY FROM EMPLOYEES e 
JOIN EMPLOYEES m ON e.MANAGER_ID = m.EMPLOYEE_ID 
WHERE EXTRACT(YEAR FROM m.HIRE_DATE) > 2005 ORDER BY e.SALARY;

SELECT CONCAT(CONCAT(FIRST_NAME, ' | '), LAST_NAME)AS FULL_NAME, SALARY, PHONE_NUMBER FROM EMPLOYEES
WHERE (LAST_NAME LIKE '__%e%') AND (FIRST_NAME LIKE '%an%') ORDER BY FIRST_NAME DESC, LAST_NAME;

SELECT e.FIRST_NAME, e.LAST_NAME, MONTHS_BETWEEN(MAX(j.END_DATE), MIN(j.START_DATE)) AS NUMBER_OF_MONTHS,
CASE WHEN MONTHS_BETWEEN(MAX(j.END_DATE), MIN(j.START_DATE)) <= 150 THEN e.SALARY * 0.10
WHEN MONTHS_BETWEEN(MAX(j.END_DATE), MIN(j.START_DATE)) BETWEEN 151 AND 200 THEN e.SALARY * 0.20
ELSE e.SALARY * 0.30
END AS BONUS
FROM EMPLOYEES e
JOIN JOB_HISTORY j ON e.EMPLOYEE_ID = j.EMPLOYEE_ID
GROUP BY e.FIRST_NAME, e.LAST_NAME, e.SALARY
ORDER BY NUMBER_OF_MONTHS;

SELECT d.DEPARTMENT_NAME, round(SUM(e.SALARY)) AS suma, round(AVG(e.SALARY)) AS srednia 
FROM JOBS j
JOIN EMPLOYEES e ON j.JOB_ID = e.JOB_ID
JOIN DEPARTMENTS d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID 
WHERE j.MIN_SALARY > 5000
GROUP BY d.DEPARTMENT_NAME;

SELECT d.DEPARTMENT_NAME, j.JOB_TITLE, j.MIN_SALARY FROM DEPARTMENTS d 
JOIN EMPLOYEES e ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
JOIN JOBS j ON e.JOB_ID = j.JOB_ID
HAVING MIN(j.MIN_SALARY) > 5000
GROUP BY d.DEPARTMENT_NAME, j.JOB_TITLE, j.MIN_SALARY;

SELECT e.LAST_NAME, e.DEPARTMENT_ID, e.JOB_ID FROM EMPLOYEES e 
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
JOIN LOCATIONS l ON l.LOCATION_ID = d.LOCATION_ID
WHERE l.CITY = 'Toronto'
GROUP BY e.LAST_NAME, e.DEPARTMENT_ID, e.JOB_ID;

SELECT e.FIRST_NAME, e.LAST_NAME, c.FIRST_NAME, c.LAST_NAME FROM EMPLOYEES e
JOIN EMPLOYEES c ON c.MANAGER_ID = e.MANAGER_ID
WHERE e.FIRST_NAME = 'Jennifer' AND e.EMPLOYEE_ID != c.EMPLOYEE_ID
GROUP BY e.FIRST_NAME, e.LAST_NAME, c.FIRST_NAME, c.LAST_NAME;

SELECT d.DEPARTMENT_ID, d.DEPARTMENT_NAME FROM EMPLOYEES e 
RIGHT JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_ID, d.DEPARTMENT_NAME
HAVING COUNT(e.EMPLOYEE_ID) = 0;

SELECT e.FIRST_NAME, e.LAST_NAME, e.JOB_ID, d.DEPARTMENT_NAME, e.SALARY, j.GRADE
FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
JOIN JOB_GRADES j ON e.SALARY BETWEEN j.MIN_SALARY AND j.MAX_SALARY
ORDER BY j.GRADE;

SELECT e.FIRST_NAME, e.LAST_NAME, e.SALARY FROM EMPLOYEES e
WHERE e.SALARY > (SELECT AVG(em.SALARY) FROM EMPLOYEES em)
GROUP BY e.FIRST_NAME, e.LAST_NAME, e.SALARY
ORDER BY e.SALARY DESC;

SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME, c.LAST_NAME FROM EMPLOYEES e 
JOIN EMPLOYEES c ON e.MANAGER_ID = c.MANAGER_ID
WHERE (c.LAST_NAME LIKE '%u%') AND (e.DEPARTMENT_ID = c.DEPARTMENT_ID) AND (e.EMPLOYEE_ID  != c.EMPLOYEE_ID);