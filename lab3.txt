SELECT
    LAST_NAME,
    SALARY,
    RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK
FROM MSU_CHMIELEWSKID.EMPLOYEES;

SELECT
    LAST_NAME,
    SALARY,
    SUM(SALARY) OVER () AS TOTAL_SALARY_SUM
FROM MSU_CHMIELEWSKID.EMPLOYEES;

-- 3.1 Utworzenie tabeli SALES
CREATE TABLE MSU_CHMIELEWSKID.SALES (
    SALE_ID NUMBER PRIMARY KEY,
    EMPLOYEE_ID NUMBER,
    PRODUCT_ID NUMBER,
    SALE_DATE DATE,
    PRICE NUMBER,
    QUANTITY NUMBER,
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES MSU_CHMIELEWSKID.EMPLOYEES(EMPLOYEE_ID)
);

-- 3.2 Utworzenie tabeli PRODUCTS
CREATE TABLE MSU_CHMIELEWSKID.PRODUCTS (
    PRODUCT_ID NUMBER PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(100),
    PRODUCT_CATEGORY VARCHAR2(100)
);

SELECT 
    e.LAST_NAME, 
    p.PRODUCT_NAME, 
    s.QUANTITY * s.PRICE AS SALE_VALUE, 
    RANK() OVER (ORDER BY s.QUANTITY * s.PRICE DESC) AS SALE_RANK
FROM MSU_CHMIELEWSKID.EMPLOYEES e
JOIN MSU_CHMIELEWSKID.SALES s ON e.EMPLOYEE_ID = s.EMPLOYEE_ID
JOIN MSU_CHMIELEWSKID.PRODUCTS p ON s.PRODUCT_ID = p.PRODUCT_ID;


SELECT
    e.LAST_NAME,
    p.PRODUCT_NAME,
    s.PRICE,
    COUNT(s.SALE_ID) OVER (PARTITION BY s.PRODUCT_ID, s.SALE_DATE) AS TRANSACTION_COUNT,
    SUM(s.PRICE * s.QUANTITY) OVER (PARTITION BY s.PRODUCT_ID, s.SALE_DATE) AS TOTAL_AMOUNT_PAID,
    LAG(s.PRICE) OVER (PARTITION BY s.PRODUCT_ID ORDER BY s.SALE_DATE) AS PREVIOUS_PRICE,
    LEAD(s.PRICE) OVER (PARTITION BY s.PRODUCT_ID ORDER BY s.SALE_DATE) AS NEXT_PRICE
FROM MSU_CHMIELEWSKID.SALES s
JOIN MSU_CHMIELEWSKID.EMPLOYEES e ON s.EMPLOYEE_ID = e.EMPLOYEE_ID
JOIN MSU_CHMIELEWSKID.PRODUCTS p ON s.PRODUCT_ID = p.PRODUCT_ID;

SELECT
    p.PRODUCT_NAME,
    s.PRICE,
    TO_CHAR(s.SALE_DATE, 'YYYY-MM') AS SALE_MONTH,
    SUM(s.PRICE * s.QUANTITY) AS TOTAL_PAID_PER_MONTH,
    SUM(SUM(s.PRICE * s.QUANTITY)) OVER (PARTITION BY p.PRODUCT_NAME ORDER BY TO_CHAR(s.SALE_DATE, 'YYYY-MM')) AS CUMULATIVE_PAID_PER_MONTH
FROM MSU_CHMIELEWSKID.SALES s
JOIN MSU_CHMIELEWSKID.PRODUCTS p ON s.PRODUCT_ID = p.PRODUCT_ID
GROUP BY p.PRODUCT_NAME, s.PRICE, TO_CHAR(s.SALE_DATE, 'YYYY-MM')
ORDER BY p.PRODUCT_NAME, SALE_MONTH;

SELECT
    p.PRODUCT_NAME,
    p.PRODUCT_CATEGORY,
    MAX(CASE WHEN EXTRACT(YEAR FROM s.SALE_DATE) = 2022 THEN s.PRICE END) AS PRICE_2022,
    MAX(CASE WHEN EXTRACT(YEAR FROM s.SALE_DATE) = 2023 THEN s.PRICE END) AS PRICE_2023,
    MAX(CASE WHEN EXTRACT(YEAR FROM s.SALE_DATE) = 2023 THEN s.PRICE END) -
    MAX(CASE WHEN EXTRACT(YEAR FROM s.SALE_DATE) = 2022 THEN s.PRICE END) AS PRICE_DIFFERENCE
FROM MSU_CHMIELEWSKID.PRODUCTS p
JOIN MSU_CHMIELEWSKID.SALES s ON p.PRODUCT_ID = s.PRODUCT_ID
WHERE EXTRACT(YEAR FROM s.SALE_DATE) IN (2022, 2023)
GROUP BY p.PRODUCT_NAME, p.PRODUCT_CATEGORY;


SELECT
    p.PRODUCT_CATEGORY,
    p.PRODUCT_NAME,
    s.PRICE,
    MIN(s.PRICE) OVER (PARTITION BY p.PRODUCT_CATEGORY) AS MIN_PRICE,
    MAX(s.PRICE) OVER (PARTITION BY p.PRODUCT_CATEGORY) AS MAX_PRICE,
    MAX(s.PRICE) OVER (PARTITION BY p.PRODUCT_CATEGORY) - MIN(s.PRICE) OVER (PARTITION BY p.PRODUCT_CATEGORY) AS PRICE_DIFFERENCE
FROM MSU_CHMIELEWSKID.PRODUCTS p
JOIN MSU_CHMIELEWSKID.SALES s ON p.PRODUCT_ID = s.PRODUCT_ID;


SELECT
    p.PRODUCT_NAME,
    s.SALE_DATE,
    LAG(s.PRICE) OVER (PARTITION BY p.PRODUCT_NAME ORDER BY s.SALE_DATE) AS PREVIOUS_PRICE,
    s.PRICE AS CURRENT_PRICE,
    LEAD(s.PRICE) OVER (PARTITION BY p.PRODUCT_NAME ORDER BY s.SALE_DATE) AS NEXT_PRICE,
    (LAG(s.PRICE) OVER (PARTITION BY p.PRODUCT_NAME ORDER BY s.SALE_DATE) +
     s.PRICE +
     LEAD(s.PRICE) OVER (PARTITION BY p.PRODUCT_NAME ORDER BY s.SALE_DATE)) / 3 AS MOVING_AVERAGE
FROM MSU_CHMIELEWSKID.PRODUCTS p
JOIN MSU_CHMIELEWSKID.SALES s ON p.PRODUCT_ID = s.PRODUCT_ID;

SELECT
    p.PRODUCT_NAME,
    p.PRODUCT_CATEGORY,
    RANK() OVER (PARTITION BY p.PRODUCT_CATEGORY ORDER BY s.PRICE) AS PRICE_RANK,
    DENSE_RANK() OVER (PARTITION BY p.PRODUCT_CATEGORY ORDER BY s.PRICE) AS DENSE_PRICE_RANK
FROM MSU_CHMIELEWSKID.PRODUCTS p
JOIN MSU_CHMIELEWSKID.SALES s ON p.PRODUCT_ID = s.PRODUCT_ID;


SELECT
    sales_data.LAST_NAME,
    sales_data.PRODUCT_NAME,
    sales_data.SALE_DATE,
    sales_data.CUMULATIVE_SALES_VALUE,
    RANK() OVER (ORDER BY sales_data.CUMULATIVE_SALES_VALUE DESC) AS GLOBAL_SALES_RANK
FROM (
    SELECT
        e.LAST_NAME,
        p.PRODUCT_NAME,
        s.SALE_DATE,
        SUM(s.SALE_ID) OVER (PARTITION BY s.EMPLOYEE_ID, p.PRODUCT_NAME ORDER BY s.SALE_DATE) AS CUMULATIVE_SALES_VALUE
    FROM MSU_CHMIELEWSKID.EMPLOYEES e
    JOIN MSU_CHMIELEWSKID.SALES s ON e.EMPLOYEE_ID = s.EMPLOYEE_ID
    JOIN MSU_CHMIELEWSKID.PRODUCTS p ON s.PRODUCT_ID = p.PRODUCT_ID
) sales_data;


SELECT
    e.FIRST_NAME,
    e.LAST_NAME,
    j.JOB_TITLE
FROM MSU_CHMIELEWSKID.SALES s
JOIN MSU_CHMIELEWSKID.EMPLOYEES e ON s.EMPLOYEE_ID = e.EMPLOYEE_ID
JOIN MSU_CHMIELEWSKID.JOBS j ON e.JOB_ID = j.JOB_ID
JOIN MSU_CHMIELEWSKID.PRODUCTS p ON s.PRODUCT_ID = p.PRODUCT_ID
GROUP BY e.FIRST_NAME, e.LAST_NAME, j.JOB_TITLE;